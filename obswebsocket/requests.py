#!/usr/bin/env python
# -*- coding: utf-8 -*-

### THIS FILE WAS GENERATED BY generate_classes.py - DO NOT EDIT ###
### (Generated on 2018-11-01 23:48:48.294032) ###

from . import base_classes

class GetStreamingStatus(base_classes.Baserequests):
    """Get current streaming and recording status.

    :Returns:
       *streaming*
            type: boolean
            Current streaming status.
       *recording*
            type: boolean
            Current recording status.
       *stream_timecode*
            type: String (optional)
            Time elapsed since streaming started (only present if currently streaming).
       *rec_timecode*
            type: String (optional)
            Time elapsed since recording started (only present if currently recording).
       *preview_only*
            type: boolean
            Always false. Retrocompatibility with OBSRemote.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetStreamingStatus"
        self.datain["streaming"] = None
        self.datain["recording"] = None
        self.datain["stream-timecode"] = None
        self.datain["rec-timecode"] = None
        self.datain["preview-only"] = None

    def getStreaming(self):
        return self.datain["streaming"]

    def getRecording(self):
        return self.datain["recording"]

    def getStreamTimecode(self):
        return self.datain["stream-timecode"]

    def getRecTimecode(self):
        return self.datain["rec-timecode"]

    def getPreviewOnly(self):
        return self.datain["preview-only"]


class StartStopStreaming(base_classes.Baserequests):
    """Toggle streaming on or off.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StartStopStreaming"


class StartStreaming(base_classes.Baserequests):
    """Start streaming.
Will return an `error` if streaming is already active.

    :Arguments:
       *stream*
            type: Object (optional)
            Special stream configuration. Please note: these won't be saved to OBS' configuration.
       *stream_type*
            type: String (optional)
            If specified ensures the type of stream matches the given type (usually 'rtmp_custom' or 'rtmp_common'). If the currently configured stream type does not match the given stream type, all settings must be specified in the `settings` object or an error will occur when starting the stream.
       *stream_metadata*
            type: Object (optional)
            Adds the given object parameters as encoded query string parameters to the 'key' of the RTMP stream. Used to pass data to the RTMP service about the streaming. May be any String, Numeric, or Boolean field.
       *stream_settings*
            type: Object (optional)
            Settings for the stream.
       *stream_settings_server*
            type: String (optional)
            The publish URL.
       *stream_settings_key*
            type: String (optional)
            The publish key of the stream.
       *stream_settings_use_auth*
            type: boolean (optional)
            Indicates whether authentication should be used when connecting to the streaming server.
       *stream_settings_username*
            type: String (optional)
            If authentication is enabled, the username for the streaming server. Ignored if `use-auth` is not set to `true`.
       *stream_settings_password*
            type: String (optional)
            If authentication is enabled, the password for the streaming server. Ignored if `use-auth` is not set to `true`.
    """
    def __init__(self, stream = None, stream_type = None, stream_metadata = None, stream_settings = None, stream_settings_server = None, stream_settings_key = None, stream_settings_use_auth = None, stream_settings_username = None, stream_settings_password = None):
        base_classes.Baserequests.__init__(self)
        self.name = "StartStreaming"
        self.dataout["stream"] = stream
        self.dataout["stream.type"] = stream_type
        self.dataout["stream.metadata"] = stream_metadata
        self.dataout["stream.settings"] = stream_settings
        self.dataout["stream.settings.server"] = stream_settings_server
        self.dataout["stream.settings.key"] = stream_settings_key
        self.dataout["stream.settings.use-auth"] = stream_settings_use_auth
        self.dataout["stream.settings.username"] = stream_settings_username
        self.dataout["stream.settings.password"] = stream_settings_password


class StopStreaming(base_classes.Baserequests):
    """Stop streaming.
Will return an `error` if streaming is not active.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StopStreaming"


class SetStreamSettings(base_classes.Baserequests):
    """Sets one or more attributes of the current streaming server settings. Any options not passed will remain unchanged. Returns the updated settings in response. If 'type' is different than the current streaming service type, all settings are required. Returns the full settings of the stream (the same as GetStreamSettings).

    :Arguments:
       *type*
            type: String
            The type of streaming service configuration, usually `rtmp_custom` or `rtmp_common`.
       *settings*
            type: Object
            The actual settings of the stream.
       *settings_server*
            type: String (optional)
            The publish URL.
       *settings_key*
            type: String (optional)
            The publish key.
       *settings_use_auth*
            type: boolean (optional)
            Indicates whether authentication should be used when connecting to the streaming server.
       *settings_username*
            type: String (optional)
            The username for the streaming service.
       *settings_password*
            type: String (optional)
            The password for the streaming service.
       *save*
            type: boolean
            Persist the settings to disk.
    """
    def __init__(self, type, settings, save, settings_server = None, settings_key = None, settings_use_auth = None, settings_username = None, settings_password = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetStreamSettings"
        self.dataout["type"] = type
        self.dataout["settings"] = settings
        self.dataout["save"] = save
        self.dataout["settings.server"] = settings_server
        self.dataout["settings.key"] = settings_key
        self.dataout["settings.use-auth"] = settings_use_auth
        self.dataout["settings.username"] = settings_username
        self.dataout["settings.password"] = settings_password


class GetStreamSettings(base_classes.Baserequests):
    """Get the current streaming server settings.

    :Returns:
       *type*
            type: String
            The type of streaming service configuration. Possible values: 'rtmp_custom' or 'rtmp_common'.
       *settings*
            type: Object
            Stream settings object.
       *settings_server*
            type: String
            The publish URL.
       *settings_key*
            type: String
            The publish key of the stream.
       *settings_use_auth*
            type: boolean
            Indicates whether authentication should be used when connecting to the streaming server.
       *settings_username*
            type: String
            The username to use when accessing the streaming server. Only present if `use-auth` is `true`.
       *settings_password*
            type: String
            The password to use when accessing the streaming server. Only present if `use-auth` is `true`.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetStreamSettings"
        self.datain["type"] = None
        self.datain["settings"] = None
        self.datain["settings.server"] = None
        self.datain["settings.key"] = None
        self.datain["settings.use-auth"] = None
        self.datain["settings.username"] = None
        self.datain["settings.password"] = None

    def getType(self):
        return self.datain["type"]

    def getSettings(self):
        return self.datain["settings"]

    def getSettings_server(self):
        return self.datain["settings.server"]

    def getSettings_key(self):
        return self.datain["settings.key"]

    def getSettings_useAuth(self):
        return self.datain["settings.use-auth"]

    def getSettings_username(self):
        return self.datain["settings.username"]

    def getSettings_password(self):
        return self.datain["settings.password"]


class SaveStreamSettings(base_classes.Baserequests):
    """Save the current streaming server settings to disk.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "SaveStreamSettings"


class GetStudioModeStatus(base_classes.Baserequests):
    """Indicates if Studio Mode is currently enabled.

    :Returns:
       *studio_mode*
            type: boolean
            Indicates if Studio Mode is enabled.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetStudioModeStatus"
        self.datain["studio-mode"] = None

    def getStudioMode(self):
        return self.datain["studio-mode"]


class GetPreviewScene(base_classes.Baserequests):
    """Get the name of the currently previewed scene and its list of sources.
Will return an `error` if Studio Mode is not enabled.

    :Returns:
       *name*
            type: String
            The name of the active preview scene.
       *sources*
            type: Source|Array
            
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetPreviewScene"
        self.datain["name"] = None
        self.datain["sources"] = None

    def getName(self):
        return self.datain["name"]

    def getSources(self):
        return self.datain["sources"]


class SetPreviewScene(base_classes.Baserequests):
    """Set the active preview scene.
Will return an `error` if Studio Mode is not enabled.

    :Arguments:
       *scene_name*
            type: String
            The name of the scene to preview.
    """
    def __init__(self, scene_name):
        base_classes.Baserequests.__init__(self)
        self.name = "SetPreviewScene"
        self.dataout["scene-name"] = scene_name


class TransitionToProgram(base_classes.Baserequests):
    """Transitions the currently previewed scene to the main output.
Will return an `error` if Studio Mode is not enabled.

    :Arguments:
       *with_transition*
            type: Object (optional)
            Change the active transition before switching scenes. Defaults to the active transition.
       *with_transition_name*
            type: String
            Name of the transition.
       *with_transition_duration*
            type: int (optional)
            Transition duration (in milliseconds).
    """
    def __init__(self, with_transition_name, with_transition = None, with_transition_duration = None):
        base_classes.Baserequests.__init__(self)
        self.name = "TransitionToProgram"
        self.dataout["with-transition.name"] = with_transition_name
        self.dataout["with-transition"] = with_transition
        self.dataout["with-transition.duration"] = with_transition_duration


class EnableStudioMode(base_classes.Baserequests):
    """Enables Studio Mode.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "EnableStudioMode"


class DisableStudioMode(base_classes.Baserequests):
    """Disables Studio Mode.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "DisableStudioMode"


class ToggleStudioMode(base_classes.Baserequests):
    """Toggles Studio Mode.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "ToggleStudioMode"


class StartStopReplayBuffer(base_classes.Baserequests):
    """Toggle the Replay Buffer on/off.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StartStopReplayBuffer"


class StartReplayBuffer(base_classes.Baserequests):
    """Start recording into the Replay Buffer.
Will return an `error` if the Replay Buffer is already active or if the
"Save Replay Buffer" hotkey is not set in OBS' settings.
Setting this hotkey is mandatory, even when triggering saves only
through obs-websocket.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StartReplayBuffer"


class StopReplayBuffer(base_classes.Baserequests):
    """Stop recording into the Replay Buffer.
Will return an `error` if the Replay Buffer is not active.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StopReplayBuffer"


class SaveReplayBuffer(base_classes.Baserequests):
    """Flush and save the contents of the Replay Buffer to disk. This is
basically the same as triggering the "Save Replay Buffer" hotkey.
Will return an `error` if the Replay Buffer is not active.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "SaveReplayBuffer"


class SetCurrentScene(base_classes.Baserequests):
    """Switch to the specified scene.

    :Arguments:
       *scene_name*
            type: String
            Name of the scene to switch to.
    """
    def __init__(self, scene_name):
        base_classes.Baserequests.__init__(self)
        self.name = "SetCurrentScene"
        self.dataout["scene-name"] = scene_name


class GetCurrentScene(base_classes.Baserequests):
    """Get the current scene's name and source items.

    :Returns:
       *name*
            type: String
            Name of the currently active scene.
       *sources*
            type: Source|Array
            Ordered list of the current scene's source items.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetCurrentScene"
        self.datain["name"] = None
        self.datain["sources"] = None

    def getName(self):
        return self.datain["name"]

    def getSources(self):
        return self.datain["sources"]


class GetSceneList(base_classes.Baserequests):
    """Get a list of scenes in the currently active profile.

    :Returns:
       *current_scene*
            type: String
            Name of the currently active scene.
       *scenes*
            type: Scene|Array
            Ordered list of the current profile's scenes (See `[GetCurrentScene](#getcurrentscene)` for more information).
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSceneList"
        self.datain["current-scene"] = None
        self.datain["scenes"] = None

    def getCurrentScene(self):
        return self.datain["current-scene"]

    def getScenes(self):
        return self.datain["scenes"]


class SetSceneItemOrder(base_classes.Baserequests):
    """Changes the order of scene items in the requested scene.

    :Arguments:
       *scene*
            type: String (optional)
            Name of the scene to reorder (defaults to current).
       *items*
            type: Scene|Array
            Ordered list of objects with name and/or id specified. Id preferred due to uniqueness per scene
       *items_id*
            type: int (optional)
            Id of a specific scene item. Unique on a scene by scene basis.
       *items_name*
            type: String (optional)
            Name of a scene item. Sufficiently unique if no scene items share sources within the scene.
    """
    def __init__(self, items, scene = None, items_id = None, items_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemOrder"
        self.dataout["items"] = items
        self.dataout["scene"] = scene
        self.dataout["items[].id"] = items_id
        self.dataout["items[].name"] = items_name


class SetCurrentProfile(base_classes.Baserequests):
    """Set the currently active profile.

    :Arguments:
       *profile_name*
            type: String
            Name of the desired profile.
    """
    def __init__(self, profile_name):
        base_classes.Baserequests.__init__(self)
        self.name = "SetCurrentProfile"
        self.dataout["profile-name"] = profile_name


class GetCurrentProfile(base_classes.Baserequests):
    """Get the name of the current profile.

    :Returns:
       *profile_name*
            type: String
            Name of the currently active profile.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetCurrentProfile"
        self.datain["profile-name"] = None

    def getProfileName(self):
        return self.datain["profile-name"]


class ListProfiles(base_classes.Baserequests):
    """Get a list of available profiles.

    :Returns:
       *profiles*
            type: Object|Array
            List of available profiles.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "ListProfiles"
        self.datain["profiles"] = None

    def getProfiles(self):
        return self.datain["profiles"]


class GetVersion(base_classes.Baserequests):
    """Returns the latest version of the plugin and the API.

    :Returns:
       *version*
            type: double
            OBSRemote compatible API version. Fixed to 1.1 for retrocompatibility.
       *obs_websocket_version*
            type: String
            obs-websocket plugin version.
       *obs_studio_version*
            type: String
            OBS Studio program version.
       *available_requests*
            type: String
            List of available request types, formatted as a comma-separated list string (e.g. : "Method1,Method2,Method3").
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetVersion"
        self.datain["version"] = None
        self.datain["obs-websocket-version"] = None
        self.datain["obs-studio-version"] = None
        self.datain["available-requests"] = None

    def getVersion(self):
        return self.datain["version"]

    def getObsWebsocketVersion(self):
        return self.datain["obs-websocket-version"]

    def getObsStudioVersion(self):
        return self.datain["obs-studio-version"]

    def getAvailableRequests(self):
        return self.datain["available-requests"]


class SetHeartbeat(base_classes.Baserequests):
    """Enable/disable sending of the Heartbeat event

    :Arguments:
       *enable*
            type: boolean
            Starts/Stops emitting heartbeat messages
    """
    def __init__(self, enable):
        base_classes.Baserequests.__init__(self)
        self.name = "SetHeartbeat"
        self.dataout["enable"] = enable


class SetFilenameFormatting(base_classes.Baserequests):
    """Set the filename formatting string

    :Arguments:
       *filename_formatting*
            type: String
            Filename formatting string to set.
    """
    def __init__(self, filename_formatting):
        base_classes.Baserequests.__init__(self)
        self.name = "SetFilenameFormatting"
        self.dataout["filename-formatting"] = filename_formatting


class GetFilenameFormatting(base_classes.Baserequests):
    """Get the filename formatting string

    :Returns:
       *filename_formatting*
            type: String
            Current filename formatting string.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetFilenameFormatting"
        self.datain["filename-formatting"] = None

    def getFilenameFormatting(self):
        return self.datain["filename-formatting"]


class StartStopRecording(base_classes.Baserequests):
    """Toggle recording on or off.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StartStopRecording"


class StartRecording(base_classes.Baserequests):
    """Start recording.
Will return an `error` if recording is already active.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StartRecording"


class StopRecording(base_classes.Baserequests):
    """Stop recording.
Will return an `error` if recording is not active.

    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "StopRecording"


class SetRecordingFolder(base_classes.Baserequests):
    """Change the current recording folder.

    :Arguments:
       *rec_folder*
            type: String
            Path of the recording folder.
    """
    def __init__(self, rec_folder):
        base_classes.Baserequests.__init__(self)
        self.name = "SetRecordingFolder"
        self.dataout["rec-folder"] = rec_folder


class GetRecordingFolder(base_classes.Baserequests):
    """Get the path of  the current recording folder.

    :Returns:
       *rec_folder*
            type: String
            Path of the recording folder.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetRecordingFolder"
        self.datain["rec-folder"] = None

    def getRecFolder(self):
        return self.datain["rec-folder"]


class GetSourcesList(base_classes.Baserequests):
    """List all sources available in the running OBS instance

    :Returns:
       *sources*
            type: Array of Objects
            Array of sources as objects
       *sources___name*
            type: String
            Unique source name
       *sources___typeId*
            type: String
            Non-unique source internal type (a.k.a type id)
       *sources___type*
            type: String
            Source type. Value is one of the following: "input", "filter", "transition", "scene" or "unknown"
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSourcesList"
        self.datain["sources"] = None
        self.datain["sources.*.name"] = None
        self.datain["sources.*.typeId"] = None
        self.datain["sources.*.type"] = None

    def getSources(self):
        return self.datain["sources"]

    def getSources___name(self):
        return self.datain["sources.*.name"]

    def getSources___typeid(self):
        return self.datain["sources.*.typeId"]

    def getSources___type(self):
        return self.datain["sources.*.type"]


class GetSourcesTypesList(base_classes.Baserequests):
    """Get a list of all available sources types

    :Returns:
       *ids*
            type: Array of Objects
            Array of sources as objects
       *ids___typeId*
            type: String
            Non-unique internal source type ID
       *ids___displayName*
            type: String
            Display name of the source type
       *ids___type*
            type: String
            Type. Value is one of the following: "input", "filter", "transition" or "other"
       *ids___defaultSettings*
            type: Object
            Default settings of this source type
       *ids___caps*
            type: Object
            Source type capabilities
       *ids___caps_isAsync*
            type: Boolean
            True if source of this type provide frames asynchronously
       *ids___caps_hasVideo*
            type: Boolean
            True if sources of this type provide video
       *ids___caps_hasAudio*
            type: Boolean
            True if sources of this type provide audio
       *ids___caps_canInteract*
            type: Boolean
            True if interaction with this sources of this type is possible
       *ids___caps_isComposite*
            type: Boolean
            True if sources of this type composite one or more sub-sources
       *ids___caps_doNotDuplicate*
            type: Boolean
            True if sources of this type should not be fully duplicated
       *ids___caps_doNotSelfMonitor*
            type: Boolean
            True if sources of this type may cause a feedback loop if it's audio is monitored and shouldn't be
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSourcesTypesList"
        self.datain["ids"] = None
        self.datain["ids.*.typeId"] = None
        self.datain["ids.*.displayName"] = None
        self.datain["ids.*.type"] = None
        self.datain["ids.*.defaultSettings"] = None
        self.datain["ids.*.caps"] = None
        self.datain["ids.*.caps.isAsync"] = None
        self.datain["ids.*.caps.hasVideo"] = None
        self.datain["ids.*.caps.hasAudio"] = None
        self.datain["ids.*.caps.canInteract"] = None
        self.datain["ids.*.caps.isComposite"] = None
        self.datain["ids.*.caps.doNotDuplicate"] = None
        self.datain["ids.*.caps.doNotSelfMonitor"] = None

    def getIds(self):
        return self.datain["ids"]

    def getIds___typeid(self):
        return self.datain["ids.*.typeId"]

    def getIds___displayname(self):
        return self.datain["ids.*.displayName"]

    def getIds___type(self):
        return self.datain["ids.*.type"]

    def getIds___defaultsettings(self):
        return self.datain["ids.*.defaultSettings"]

    def getIds___caps(self):
        return self.datain["ids.*.caps"]

    def getIds___caps_isasync(self):
        return self.datain["ids.*.caps.isAsync"]

    def getIds___caps_hasvideo(self):
        return self.datain["ids.*.caps.hasVideo"]

    def getIds___caps_hasaudio(self):
        return self.datain["ids.*.caps.hasAudio"]

    def getIds___caps_caninteract(self):
        return self.datain["ids.*.caps.canInteract"]

    def getIds___caps_iscomposite(self):
        return self.datain["ids.*.caps.isComposite"]

    def getIds___caps_donotduplicate(self):
        return self.datain["ids.*.caps.doNotDuplicate"]

    def getIds___caps_donotselfmonitor(self):
        return self.datain["ids.*.caps.doNotSelfMonitor"]


class GetVolume(base_classes.Baserequests):
    """Get the volume of the specified source.

    :Arguments:
       *source*
            type: String
            Name of the source.
    :Returns:
       *name*
            type: String
            Name of the source.
       *volume*
            type: double
            Volume of the source. Between `0.0` and `1.0`.
       *mute*
            type: boolean
            Indicates whether the source is muted.
    """
    def __init__(self, source):
        base_classes.Baserequests.__init__(self)
        self.name = "GetVolume"
        self.datain["name"] = None
        self.datain["volume"] = None
        self.datain["mute"] = None
        self.dataout["source"] = source

    def getName(self):
        return self.datain["name"]

    def getVolume(self):
        return self.datain["volume"]

    def getMute(self):
        return self.datain["muted"]


class SetVolume(base_classes.Baserequests):
    """Set the volume of the specified source.

    :Arguments:
       *source*
            type: String
            Name of the source.
       *volume*
            type: double
            Desired volume. Must be between `0.0` and `1.0`.
    """
    def __init__(self, source, volume):
        base_classes.Baserequests.__init__(self)
        self.name = "SetVolume"
        self.dataout["source"] = source
        self.dataout["volume"] = volume


class GetMute(base_classes.Baserequests):
    """Get the mute status of a specified source.

    :Arguments:
       *source*
            type: String
            The name of the source.
    :Returns:
       *name*
            type: String
            The name of the source.
       *muted*
            type: boolean
            Mute status of the source.
    """
    def __init__(self, source):
        base_classes.Baserequests.__init__(self)
        self.name = "GetMute"
        self.datain["name"] = None
        self.datain["muted"] = None
        self.dataout["source"] = source

    def getName(self):
        return self.datain["name"]

    def getMuted(self):
        return self.datain["muted"]


class SetMute(base_classes.Baserequests):
    """Sets the mute status of a specified source.

    :Arguments:
       *source*
            type: String
            The name of the source.
       *mute*
            type: boolean
            Desired mute status.
    """
    def __init__(self, source, mute):
        base_classes.Baserequests.__init__(self)
        self.name = "SetMute"
        self.dataout["source"] = source
        self.dataout["mute"] = mute


class ToggleMute(base_classes.Baserequests):
    """Inverts the mute status of a specified source.

    :Arguments:
       *source*
            type: String
            The name of the source.
    """
    def __init__(self, source):
        base_classes.Baserequests.__init__(self)
        self.name = "ToggleMute"
        self.dataout["source"] = source


class SetSyncOffset(base_classes.Baserequests):
    """Set the audio sync offset of a specified source.

    :Arguments:
       *source*
            type: String
            The name of the source.
       *offset*
            type: int
            The desired audio sync offset (in nanoseconds).
    """
    def __init__(self, source, offset):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSyncOffset"
        self.dataout["source"] = source
        self.dataout["offset"] = offset


class GetSyncOffset(base_classes.Baserequests):
    """Get the audio sync offset of a specified source.

    :Arguments:
       *source*
            type: String
            The name of the source.
    :Returns:
       *name*
            type: String
            The name of the source.
       *offset*
            type: int
            The audio sync offset (in nanoseconds).
    """
    def __init__(self, source):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSyncOffset"
        self.datain["name"] = None
        self.datain["offset"] = None
        self.dataout["source"] = source

    def getName(self):
        return self.datain["name"]

    def getOffset(self):
        return self.datain["offset"]


class GetSourceSettings(base_classes.Baserequests):
    """Get settings of the specified source

    :Arguments:
       *sourceName*
            type: String
            Name of the source item.
       *sourceType*
            type: String (optional)
            Type of the specified source. Useful for type-checking if you expect a specific settings schema.
    :Returns:
       *sourceName*
            type: String
            Source name
       *sourceType*
            type: String
            Type of the specified source
       *sourceSettings*
            type: Object
            Source settings. Varying between source types.
    """
    def __init__(self, sourceName, sourceType = None):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSourceSettings"
        self.datain["sourceName"] = None
        self.datain["sourceType"] = None
        self.datain["sourceSettings"] = None
        self.dataout["sourceName"] = sourceName
        self.dataout["sourceType"] = sourceType

    def getSourcename(self):
        return self.datain["sourceName"]

    def getSourcetype(self):
        return self.datain["sourceType"]

    def getSourcesettings(self):
        return self.datain["sourceSettings"]


class SetSourceSettings(base_classes.Baserequests):
    """Set settings of the specified source.

    :Arguments:
       *sourceName*
            type: String
            Name of the source item.
       *sourceType*
            type: String (optional)
            Type of the specified source. Useful for type-checking to avoid settings a set of settings incompatible with the actual source's type.
       *sourceSettings*
            type: Object
            Source settings. Varying between source types.
    :Returns:
       *sourceName*
            type: String
            Source name
       *sourceType*
            type: String
            Type of the specified source
       *sourceSettings*
            type: Object
            Source settings. Varying between source types.
    """
    def __init__(self, sourceName, sourceSettings, sourceType = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSourceSettings"
        self.datain["sourceName"] = None
        self.datain["sourceType"] = None
        self.datain["sourceSettings"] = None
        self.dataout["sourceName"] = sourceName
        self.dataout["sourceSettings"] = sourceSettings
        self.dataout["sourceType"] = sourceType

    def getSourcename(self):
        return self.datain["sourceName"]

    def getSourcetype(self):
        return self.datain["sourceType"]

    def getSourcesettings(self):
        return self.datain["sourceSettings"]


class GetTextGDIPlusProperties(base_classes.Baserequests):
    """Get the current properties of a Text GDI Plus source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene to retrieve. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
    :Returns:
       *align*
            type: String
            Text Alignment ("left", "center", "right").
       *bk_color*
            type: int
            Background color.
       *bk_opacity*
            type: int
            Background opacity (0-100).
       *chatlog*
            type: boolean
            Chat log.
       *chatlog_lines*
            type: int
            Chat log lines.
       *color*
            type: int
            Text color.
       *extents*
            type: boolean
            Extents wrap.
       *extents_cx*
            type: int
            Extents cx.
       *extents_cy*
            type: int
            Extents cy.
       *file*
            type: String
            File path name.
       *read_from_file*
            type: boolean
            Read text from the specified file.
       *font*
            type: Object
            Holds data for the font. Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`
       *font_face*
            type: String
            Font face.
       *font_flags*
            type: int
            Font text styling flag. `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`
       *font_size*
            type: int
            Font text size.
       *font_style*
            type: String
            Font Style (unknown function).
       *gradient*
            type: boolean
            Gradient enabled.
       *gradient_color*
            type: int
            Gradient color.
       *gradient_dir*
            type: float
            Gradient direction.
       *gradient_opacity*
            type: int
            Gradient opacity (0-100).
       *outline*
            type: boolean
            Outline.
       *outline_color*
            type: int
            Outline color.
       *outline_size*
            type: int
            Outline size.
       *outline_opacity*
            type: int
            Outline opacity (0-100).
       *text*
            type: String
            Text content to be displayed.
       *valign*
            type: String
            Text vertical alignment ("top", "center", "bottom").
       *vertical*
            type: boolean
            Vertical text enabled.
       *render*
            type: boolean
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "GetTextGDIPlusProperties"
        self.datain["align"] = None
        self.datain["bk-color"] = None
        self.datain["bk-opacity"] = None
        self.datain["chatlog"] = None
        self.datain["chatlog_lines"] = None
        self.datain["color"] = None
        self.datain["extents"] = None
        self.datain["extents_cx"] = None
        self.datain["extents_cy"] = None
        self.datain["file"] = None
        self.datain["read_from_file"] = None
        self.datain["font"] = None
        self.datain["font.face"] = None
        self.datain["font.flags"] = None
        self.datain["font.size"] = None
        self.datain["font.style"] = None
        self.datain["gradient"] = None
        self.datain["gradient_color"] = None
        self.datain["gradient_dir"] = None
        self.datain["gradient_opacity"] = None
        self.datain["outline"] = None
        self.datain["outline_color"] = None
        self.datain["outline_size"] = None
        self.datain["outline_opacity"] = None
        self.datain["text"] = None
        self.datain["valign"] = None
        self.datain["vertical"] = None
        self.datain["render"] = None
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name

    def getAlign(self):
        return self.datain["align"]

    def getBkColor(self):
        return self.datain["bk-color"]

    def getBkOpacity(self):
        return self.datain["bk-opacity"]

    def getChatlog(self):
        return self.datain["chatlog"]

    def getChatlog_lines(self):
        return self.datain["chatlog_lines"]

    def getColor(self):
        return self.datain["color"]

    def getExtents(self):
        return self.datain["extents"]

    def getExtents_cx(self):
        return self.datain["extents_cx"]

    def getExtents_cy(self):
        return self.datain["extents_cy"]

    def getFile(self):
        return self.datain["file"]

    def getRead_from_file(self):
        return self.datain["read_from_file"]

    def getFont(self):
        return self.datain["font"]

    def getFont_face(self):
        return self.datain["font.face"]

    def getFont_flags(self):
        return self.datain["font.flags"]

    def getFont_size(self):
        return self.datain["font.size"]

    def getFont_style(self):
        return self.datain["font.style"]

    def getGradient(self):
        return self.datain["gradient"]

    def getGradient_color(self):
        return self.datain["gradient_color"]

    def getGradient_dir(self):
        return self.datain["gradient_dir"]

    def getGradient_opacity(self):
        return self.datain["gradient_opacity"]

    def getOutline(self):
        return self.datain["outline"]

    def getOutline_color(self):
        return self.datain["outline_color"]

    def getOutline_size(self):
        return self.datain["outline_size"]

    def getOutline_opacity(self):
        return self.datain["outline_opacity"]

    def getText(self):
        return self.datain["text"]

    def getValign(self):
        return self.datain["valign"]

    def getVertical(self):
        return self.datain["vertical"]

    def getRender(self):
        return self.datain["render"]


class SetTextGDIPlusProperties(base_classes.Baserequests):
    """Set the current properties of a Text GDI Plus source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene to retrieve. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
       *align*
            type: String (optional)
            Text Alignment ("left", "center", "right").
       *bk_color*
            type: int (optional)
            Background color.
       *bk_opacity*
            type: int (optional)
            Background opacity (0-100).
       *chatlog*
            type: boolean (optional)
            Chat log.
       *chatlog_lines*
            type: int (optional)
            Chat log lines.
       *color*
            type: int (optional)
            Text color.
       *extents*
            type: boolean (optional)
            Extents wrap.
       *extents_cx*
            type: int (optional)
            Extents cx.
       *extents_cy*
            type: int (optional)
            Extents cy.
       *file*
            type: String (optional)
            File path name.
       *read_from_file*
            type: boolean (optional)
            Read text from the specified file.
       *font*
            type: Object (optional)
            Holds data for the font. Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`
       *font_face*
            type: String (optional)
            Font face.
       *font_flags*
            type: int (optional)
            Font text styling flag. `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`
       *font_size*
            type: int (optional)
            Font text size.
       *font_style*
            type: String (optional)
            Font Style (unknown function).
       *gradient*
            type: boolean (optional)
            Gradient enabled.
       *gradient_color*
            type: int (optional)
            Gradient color.
       *gradient_dir*
            type: float (optional)
            Gradient direction.
       *gradient_opacity*
            type: int (optional)
            Gradient opacity (0-100).
       *outline*
            type: boolean (optional)
            Outline.
       *outline_color*
            type: int (optional)
            Outline color.
       *outline_size*
            type: int (optional)
            Outline size.
       *outline_opacity*
            type: int (optional)
            Outline opacity (0-100).
       *text*
            type: String (optional)
            Text content to be displayed.
       *valign*
            type: String (optional)
            Text vertical alignment ("top", "center", "bottom").
       *vertical*
            type: boolean (optional)
            Vertical text enabled.
       *render*
            type: boolean (optional)
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None, align = None, bk_color = None, bk_opacity = None, chatlog = None, chatlog_lines = None, color = None, extents = None, extents_cx = None, extents_cy = None, file = None, read_from_file = None, font = None, font_face = None, font_flags = None, font_size = None, font_style = None, gradient = None, gradient_color = None, gradient_dir = None, gradient_opacity = None, outline = None, outline_color = None, outline_size = None, outline_opacity = None, text = None, valign = None, vertical = None, render = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetTextGDIPlusProperties"
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name
        self.dataout["align"] = align
        self.dataout["bk-color"] = bk_color
        self.dataout["bk-opacity"] = bk_opacity
        self.dataout["chatlog"] = chatlog
        self.dataout["chatlog_lines"] = chatlog_lines
        self.dataout["color"] = color
        self.dataout["extents"] = extents
        self.dataout["extents_cx"] = extents_cx
        self.dataout["extents_cy"] = extents_cy
        self.dataout["file"] = file
        self.dataout["read_from_file"] = read_from_file
        self.dataout["font"] = font
        self.dataout["font.face"] = font_face
        self.dataout["font.flags"] = font_flags
        self.dataout["font.size"] = font_size
        self.dataout["font.style"] = font_style
        self.dataout["gradient"] = gradient
        self.dataout["gradient_color"] = gradient_color
        self.dataout["gradient_dir"] = gradient_dir
        self.dataout["gradient_opacity"] = gradient_opacity
        self.dataout["outline"] = outline
        self.dataout["outline_color"] = outline_color
        self.dataout["outline_size"] = outline_size
        self.dataout["outline_opacity"] = outline_opacity
        self.dataout["text"] = text
        self.dataout["valign"] = valign
        self.dataout["vertical"] = vertical
        self.dataout["render"] = render


class GetTextFreetype2Properties(base_classes.Baserequests):
    """Get the current properties of a Text Freetype 2 source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene to retrieve. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
    :Returns:
       *color1*
            type: int
            Gradient top color.
       *color2*
            type: int
            Gradient bottom color.
       *custom_width*
            type: int
            Custom width (0 to disable).
       *drop_shadow*
            type: boolean
            Drop shadow.
       *font*
            type: Object
            Holds data for the font. Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`
       *font_face*
            type: String
            Font face.
       *font_flags*
            type: int
            Font text styling flag. `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`
       *font_size*
            type: int
            Font text size.
       *font_style*
            type: String
            Font Style (unknown function).
       *from_file*
            type: boolean
            Read text from the specified file.
       *log_mode*
            type: boolean
            Chat log.
       *outline*
            type: boolean
            Outline.
       *text*
            type: String
            Text content to be displayed.
       *text_file*
            type: String
            File path.
       *word_wrap*
            type: boolean
            Word wrap.
       *render*
            type: boolean
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "GetTextFreetype2Properties"
        self.datain["color1"] = None
        self.datain["color2"] = None
        self.datain["custom_width"] = None
        self.datain["drop_shadow"] = None
        self.datain["font"] = None
        self.datain["font.face"] = None
        self.datain["font.flags"] = None
        self.datain["font.size"] = None
        self.datain["font.style"] = None
        self.datain["from_file"] = None
        self.datain["log_mode"] = None
        self.datain["outline"] = None
        self.datain["text"] = None
        self.datain["text_file"] = None
        self.datain["word_wrap"] = None
        self.datain["render"] = None
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name

    def getColor1(self):
        return self.datain["color1"]

    def getColor2(self):
        return self.datain["color2"]

    def getCustom_width(self):
        return self.datain["custom_width"]

    def getDrop_shadow(self):
        return self.datain["drop_shadow"]

    def getFont(self):
        return self.datain["font"]

    def getFont_face(self):
        return self.datain["font.face"]

    def getFont_flags(self):
        return self.datain["font.flags"]

    def getFont_size(self):
        return self.datain["font.size"]

    def getFont_style(self):
        return self.datain["font.style"]

    def getFrom_file(self):
        return self.datain["from_file"]

    def getLog_mode(self):
        return self.datain["log_mode"]

    def getOutline(self):
        return self.datain["outline"]

    def getText(self):
        return self.datain["text"]

    def getText_file(self):
        return self.datain["text_file"]

    def getWord_wrap(self):
        return self.datain["word_wrap"]

    def getRender(self):
        return self.datain["render"]


class SetTextFreetype2Properties(base_classes.Baserequests):
    """Set the current properties of a Text Freetype 2 source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene to retrieve. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
       *color1*
            type: int (optional)
            Gradient top color.
       *color2*
            type: int (optional)
            Gradient bottom color.
       *custom_width*
            type: int (optional)
            Custom width (0 to disable).
       *drop_shadow*
            type: boolean (optional)
            Drop shadow.
       *font*
            type: Object (optional)
            Holds data for the font. Ex: `"font": { "face": "Arial", "flags": 0, "size": 150, "style": "" }`
       *font_face*
            type: String (optional)
            Font face.
       *font_flags*
            type: int (optional)
            Font text styling flag. `Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8`
       *font_size*
            type: int (optional)
            Font text size.
       *font_style*
            type: String (optional)
            Font Style (unknown function).
       *from_file*
            type: boolean (optional)
            Read text from the specified file.
       *log_mode*
            type: boolean (optional)
            Chat log.
       *outline*
            type: boolean (optional)
            Outline.
       *text*
            type: String (optional)
            Text content to be displayed.
       *text_file*
            type: String (optional)
            File path.
       *word_wrap*
            type: boolean (optional)
            Word wrap.
       *render*
            type: boolean (optional)
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None, color1 = None, color2 = None, custom_width = None, drop_shadow = None, font = None, font_face = None, font_flags = None, font_size = None, font_style = None, from_file = None, log_mode = None, outline = None, text = None, text_file = None, word_wrap = None, render = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetTextFreetype2Properties"
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name
        self.dataout["color1"] = color1
        self.dataout["color2"] = color2
        self.dataout["custom_width"] = custom_width
        self.dataout["drop_shadow"] = drop_shadow
        self.dataout["font"] = font
        self.dataout["font.face"] = font_face
        self.dataout["font.flags"] = font_flags
        self.dataout["font.size"] = font_size
        self.dataout["font.style"] = font_style
        self.dataout["from_file"] = from_file
        self.dataout["log_mode"] = log_mode
        self.dataout["outline"] = outline
        self.dataout["text"] = text
        self.dataout["text_file"] = text_file
        self.dataout["word_wrap"] = word_wrap
        self.dataout["render"] = render


class GetBrowserSourceProperties(base_classes.Baserequests):
    """Get current properties for a Browser Source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene that the source belongs to. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
    :Returns:
       *is_local_file*
            type: boolean
            Indicates that a local file is in use.
       *local_file*
            type: String
            file path.
       *url*
            type: String
            Url.
       *css*
            type: String
            CSS to inject.
       *width*
            type: int
            Width.
       *height*
            type: int
            Height.
       *fps*
            type: int
            Framerate.
       *shutdown*
            type: boolean
            Indicates whether the source should be shutdown when not visible.
       *render*
            type: boolean (optional)
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "GetBrowserSourceProperties"
        self.datain["is_local_file"] = None
        self.datain["local_file"] = None
        self.datain["url"] = None
        self.datain["css"] = None
        self.datain["width"] = None
        self.datain["height"] = None
        self.datain["fps"] = None
        self.datain["shutdown"] = None
        self.datain["render"] = None
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name

    def getIs_local_file(self):
        return self.datain["is_local_file"]

    def getLocal_file(self):
        return self.datain["local_file"]

    def getUrl(self):
        return self.datain["url"]

    def getCss(self):
        return self.datain["css"]

    def getWidth(self):
        return self.datain["width"]

    def getHeight(self):
        return self.datain["height"]

    def getFps(self):
        return self.datain["fps"]

    def getShutdown(self):
        return self.datain["shutdown"]

    def getRender(self):
        return self.datain["render"]


class SetBrowserSourceProperties(base_classes.Baserequests):
    """Set current properties for a Browser Source.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene that the source belongs to. Defaults to the current scene.
       *source*
            type: String
            Name of the source.
       *is_local_file*
            type: boolean (optional)
            Indicates that a local file is in use.
       *local_file*
            type: String (optional)
            file path.
       *url*
            type: String (optional)
            Url.
       *css*
            type: String (optional)
            CSS to inject.
       *width*
            type: int (optional)
            Width.
       *height*
            type: int (optional)
            Height.
       *fps*
            type: int (optional)
            Framerate.
       *shutdown*
            type: boolean (optional)
            Indicates whether the source should be shutdown when not visible.
       *render*
            type: boolean (optional)
            Visibility of the scene item.
    """
    def __init__(self, source, scene_name = None, is_local_file = None, local_file = None, url = None, css = None, width = None, height = None, fps = None, shutdown = None, render = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetBrowserSourceProperties"
        self.dataout["source"] = source
        self.dataout["scene-name"] = scene_name
        self.dataout["is_local_file"] = is_local_file
        self.dataout["local_file"] = local_file
        self.dataout["url"] = url
        self.dataout["css"] = css
        self.dataout["width"] = width
        self.dataout["height"] = height
        self.dataout["fps"] = fps
        self.dataout["shutdown"] = shutdown
        self.dataout["render"] = render


class DeleteSceneItem(base_classes.Baserequests):
    """Deletes a scene item.

    :Arguments:
       *scene*
            type: String (optional)
            Name of the scene the source belongs to. Defaults to the current scene.
       *item*
            type: Object
            item to delete (required)
       *item_name*
            type: String
            name of the scene item (prefer `id`, including both is acceptable).
       *item_id*
            type: int
            id of the scene item.
    """
    def __init__(self, item, item_name, item_id, scene = None):
        base_classes.Baserequests.__init__(self)
        self.name = "DeleteSceneItem"
        self.dataout["item"] = item
        self.dataout["item.name"] = item_name
        self.dataout["item.id"] = item_id
        self.dataout["scene"] = scene


class DuplicateSceneItem(base_classes.Baserequests):
    """Duplicates a scene item.

    :Arguments:
       *fromScene*
            type: String (optional)
            Name of the scene to copy the item from. Defaults to the current scene.
       *toScene*
            type: String (optional)
            Name of the scene to create the item in. Defaults to the current scene.
       *item*
            type: Object
            item to delete (required)
       *item_name*
            type: String
            name of the scene item (prefer `id`, including both is acceptable).
       *item_id*
            type: int
            id of the scene item.
    """
    def __init__(self, item, item_name, item_id, fromScene = None, toScene = None):
        base_classes.Baserequests.__init__(self)
        self.name = "DuplicateSceneItem"
        self.dataout["item"] = item
        self.dataout["item.name"] = item_name
        self.dataout["item.id"] = item_id
        self.dataout["fromScene"] = fromScene
        self.dataout["toScene"] = toScene


class GetSpecialSources(base_classes.Baserequests):
    """Get configured special sources like Desktop Audio and Mic/Aux sources.

    :Returns:
       *desktop_1*
            type: String (optional)
            Name of the first Desktop Audio capture source.
       *desktop_2*
            type: String (optional)
            Name of the second Desktop Audio capture source.
       *mic_1*
            type: String (optional)
            Name of the first Mic/Aux input source.
       *mic_2*
            type: String (optional)
            Name of the second Mic/Aux input source.
       *mic_3*
            type: String (optional)
            Name of the third Mic/Aux input source.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSpecialSources"
        self.datain["desktop-1"] = None
        self.datain["desktop-2"] = None
        self.datain["mic-1"] = None
        self.datain["mic-2"] = None
        self.datain["mic-3"] = None

    def getDesktop1(self):
        return self.datain["desktop-1"]

    def getDesktop2(self):
        return self.datain["desktop-2"]

    def getMic1(self):
        return self.datain["mic-1"]

    def getMic2(self):
        return self.datain["mic-2"]

    def getMic3(self):
        return self.datain["mic-3"]


class GetSourceFilters(base_classes.Baserequests):
    """List filters applied to a source

    :Arguments:
       *sourceName*
            type: String
            Source name
    :Returns:
       *filters*
            type: Array of Objects
            List of filters for the specified source
       *filters___type*
            type: String
            Filter type
       *filters___name*
            type: String
            Filter name
       *filters___settings*
            type: Object
            Filter settings
    """
    def __init__(self, sourceName):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSourceFilters"
        self.datain["filters"] = None
        self.datain["filters.*.type"] = None
        self.datain["filters.*.name"] = None
        self.datain["filters.*.settings"] = None
        self.dataout["sourceName"] = sourceName

    def getFilters(self):
        return self.datain["filters"]

    def getFilters___type(self):
        return self.datain["filters.*.type"]

    def getFilters___name(self):
        return self.datain["filters.*.name"]

    def getFilters___settings(self):
        return self.datain["filters.*.settings"]


class AddFilterToSource(base_classes.Baserequests):
    """Add a new filter to a source. Available source types along with their settings properties are available from `GetSourceTypesList`.

    :Arguments:
       *sourceName*
            type: String
            Name of the source on which the filter is added
       *filterName*
            type: String
            Name of the new filter
       *filterType*
            type: String
            Filter type
       *filterSettings*
            type: Object
            Filter settings
    """
    def __init__(self, sourceName, filterName, filterType, filterSettings):
        base_classes.Baserequests.__init__(self)
        self.name = "AddFilterToSource"
        self.dataout["sourceName"] = sourceName
        self.dataout["filterName"] = filterName
        self.dataout["filterType"] = filterType
        self.dataout["filterSettings"] = filterSettings


class RemoveFilterFromSource(base_classes.Baserequests):
    """Remove a filter from a source

    :Arguments:
       *sourceName*
            type: String
            Name of the source from which the specified filter is removed
       *filterName*
            type: String
            Name of the filter to remove
    """
    def __init__(self, sourceName, filterName):
        base_classes.Baserequests.__init__(self)
        self.name = "RemoveFilterFromSource"
        self.dataout["sourceName"] = sourceName
        self.dataout["filterName"] = filterName


class ReorderSourceFilter(base_classes.Baserequests):
    """Move a filter in the chain (absolute index positioning)

    :Arguments:
       *sourceName*
            type: String
            Name of the source to which the filter belongs
       *filterName*
            type: String
            Name of the filter to reorder
       *newIndex*
            type: Integer
            Desired position of the filter in the chain
    """
    def __init__(self, sourceName, filterName, newIndex):
        base_classes.Baserequests.__init__(self)
        self.name = "ReorderSourceFilter"
        self.dataout["sourceName"] = sourceName
        self.dataout["filterName"] = filterName
        self.dataout["newIndex"] = newIndex


class MoveSourceFilter(base_classes.Baserequests):
    """Move a filter in the chain (relative positioning)

    :Arguments:
       *sourceName*
            type: String
            Name of the source to which the filter belongs
       *filterName*
            type: String
            Name of the filter to reorder
       *movementType*
            type: String
            How to move the filter around in the source's filter chain. Either "up", "down", "top" or "bottom".
    """
    def __init__(self, sourceName, filterName, movementType):
        base_classes.Baserequests.__init__(self)
        self.name = "MoveSourceFilter"
        self.dataout["sourceName"] = sourceName
        self.dataout["filterName"] = filterName
        self.dataout["movementType"] = movementType


class SetSourceFilterSettings(base_classes.Baserequests):
    """Update settings of a filter

    :Arguments:
       *sourceName*
            type: String
            Name of the source to which the filter belongs
       *filterName*
            type: String
            Name of the filter to reconfigure
       *filterSettings*
            type: Object
            New settings. These will be merged to the current filter settings.
    """
    def __init__(self, sourceName, filterName, filterSettings):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSourceFilterSettings"
        self.dataout["sourceName"] = sourceName
        self.dataout["filterName"] = filterName
        self.dataout["filterSettings"] = filterSettings


class SetCurrentSceneCollection(base_classes.Baserequests):
    """Change the active scene collection.

    :Arguments:
       *sc_name*
            type: String
            Name of the desired scene collection.
    """
    def __init__(self, sc_name):
        base_classes.Baserequests.__init__(self)
        self.name = "SetCurrentSceneCollection"
        self.dataout["sc-name"] = sc_name


class GetCurrentSceneCollection(base_classes.Baserequests):
    """Get the name of the current scene collection.

    :Returns:
       *sc_name*
            type: String
            Name of the currently active scene collection.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetCurrentSceneCollection"
        self.datain["sc-name"] = None

    def getScName(self):
        return self.datain["sc-name"]


class ListSceneCollections(base_classes.Baserequests):
    """List available scene collections

    :Returns:
       *scene_collections*
            type: Object|Array
            Scene collections list
       *scene_collections___*
            type: String
            
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "ListSceneCollections"
        self.datain["scene-collections"] = None
        self.datain["scene-collections.*."] = None

    def getSceneCollections(self):
        return self.datain["scene-collections"]

    def getSceneCollections___(self):
        return self.datain["scene-collections.*."]


class GetTransitionList(base_classes.Baserequests):
    """List of all transitions available in the frontend's dropdown menu.

    :Returns:
       *current_transition*
            type: String
            Name of the currently active transition.
       *transitions*
            type: Object|Array
            List of transitions.
       *transitions_name*
            type: String
            Name of the transition.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetTransitionList"
        self.datain["current-transition"] = None
        self.datain["transitions"] = None
        self.datain["transitions[].name"] = None

    def getCurrentTransition(self):
        return self.datain["current-transition"]

    def getTransitions(self):
        return self.datain["transitions"]

    def getTransitions_name(self):
        return self.datain["transitions[].name"]


class GetCurrentTransition(base_classes.Baserequests):
    """Get the name of the currently selected transition in the frontend's dropdown menu.

    :Returns:
       *name*
            type: String
            Name of the selected transition.
       *duration*
            type: int (optional)
            Transition duration (in milliseconds) if supported by the transition.
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetCurrentTransition"
        self.datain["name"] = None
        self.datain["duration"] = None

    def getName(self):
        return self.datain["name"]

    def getDuration(self):
        return self.datain["duration"]


class SetCurrentTransition(base_classes.Baserequests):
    """Set the active transition.

    :Arguments:
       *transition_name*
            type: String
            The name of the transition.
    """
    def __init__(self, transition_name):
        base_classes.Baserequests.__init__(self)
        self.name = "SetCurrentTransition"
        self.dataout["transition-name"] = transition_name


class SetTransitionDuration(base_classes.Baserequests):
    """Set the duration of the currently selected transition if supported.

    :Arguments:
       *duration*
            type: int
            Desired duration of the transition (in milliseconds).
    """
    def __init__(self, duration):
        base_classes.Baserequests.__init__(self)
        self.name = "SetTransitionDuration"
        self.dataout["duration"] = duration


class GetTransitionDuration(base_classes.Baserequests):
    """Get the duration of the currently selected transition if supported.

    :Returns:
       *transition_duration*
            type: int
            Duration of the current transition (in milliseconds).
    """
    def __init__(self):
        base_classes.Baserequests.__init__(self)
        self.name = "GetTransitionDuration"
        self.datain["transition-duration"] = None

    def getTransitionDuration(self):
        return self.datain["transition-duration"]


class GetSceneItemProperties(base_classes.Baserequests):
    """Gets the scene specific properties of the specified source item.

    :Arguments:
       *scene*
            type: String (optional)
            the name of the scene that the source item belongs to. Defaults to the current scene.
       *item_id*
            type: String
            The name of the source.
       *item_name*
            type: String
            The name of the source.
    :Returns:
       *scene*
            type: String
            The name of the scene.
       *item_name*
            type: String
            The name of the source.
       *item_id*
            type: String
            The id of the scene item.
       *item_position_x*
            type: int
            The x position of the source from the left.
       *item_position_y*
            type: int
            The y position of the source from the top.
       *item_position_alignment*
            type: int
            The point on the source that the item is manipulated from.
       *item_rotation*
            type: double
            The clockwise rotation of the item in degrees around the point of alignment.
       *item_scale_x*
            type: double
            The x-scale factor of the source.
       *item_scale_y*
            type: double
            The y-scale factor of the source.
       *item_crop_top*
            type: int
            The number of pixels cropped off the top of the source before scaling.
       *item_crop_right*
            type: int
            The number of pixels cropped off the right of the source before scaling.
       *item_crop_bottom*
            type: int
            The number of pixels cropped off the bottom of the source before scaling.
       *item_crop_left*
            type: int
            The number of pixels cropped off the left of the source before scaling.
       *item_visible*
            type: bool
            If the source is visible.
       *item_locked*
            type: bool
            If the source is locked.
       *item_bounds_type*
            type: String
            Type of bounding box.
       *item_bounds_alignment*
            type: int
            Alignment of the bounding box.
       *item_bounds_x*
            type: double
            Width of the bounding box.
       *item_bounds_y*
            type: double
            Height of the bounding box.
    """
    def __init__(self, item_id, item_name, scene = None):
        base_classes.Baserequests.__init__(self)
        self.name = "GetSceneItemProperties"
        self.datain["scene"] = None
        self.datain["item.name"] = None
        self.datain["item.id"] = None
        self.datain["item.position.x"] = None
        self.datain["item.position.y"] = None
        self.datain["item.position.alignment"] = None
        self.datain["item.rotation"] = None
        self.datain["item.scale.x"] = None
        self.datain["item.scale.y"] = None
        self.datain["item.crop.top"] = None
        self.datain["item.crop.right"] = None
        self.datain["item.crop.bottom"] = None
        self.datain["item.crop.left"] = None
        self.datain["item.visible"] = None
        self.datain["item.locked"] = None
        self.datain["item.bounds.type"] = None
        self.datain["item.bounds.alignment"] = None
        self.datain["item.bounds.x"] = None
        self.datain["item.bounds.y"] = None
        self.dataout["item.id"] = item_id
        self.dataout["item.name"] = item_name
        self.dataout["scene"] = scene

    def getScene(self):
        return self.datain["scene"]

    def getItem_name(self):
        return self.datain["item.name"]

    def getItem_id(self):
        return self.datain["item.id"]

    def getItem_position_x(self):
        return self.datain["item.position.x"]

    def getItem_position_y(self):
        return self.datain["item.position.y"]

    def getItem_position_alignment(self):
        return self.datain["item.position.alignment"]

    def getItem_rotation(self):
        return self.datain["item.rotation"]

    def getItem_scale_x(self):
        return self.datain["item.scale.x"]

    def getItem_scale_y(self):
        return self.datain["item.scale.y"]

    def getItem_crop_top(self):
        return self.datain["item.crop.top"]

    def getItem_crop_right(self):
        return self.datain["item.crop.right"]

    def getItem_crop_bottom(self):
        return self.datain["item.crop.bottom"]

    def getItem_crop_left(self):
        return self.datain["item.crop.left"]

    def getItem_visible(self):
        return self.datain["item.visible"]

    def getItem_locked(self):
        return self.datain["item.locked"]

    def getItem_bounds_type(self):
        return self.datain["item.bounds.type"]

    def getItem_bounds_alignment(self):
        return self.datain["item.bounds.alignment"]

    def getItem_bounds_x(self):
        return self.datain["item.bounds.x"]

    def getItem_bounds_y(self):
        return self.datain["item.bounds.y"]


class SetSceneItemProperties(base_classes.Baserequests):
    """Sets the scene specific properties of a source. Unspecified properties will remain unchanged.

    :Arguments:
       *scene*
            type: String (optional)
            the name of the scene that the source item belongs to. Defaults to the current scene.
       *item_name*
            type: String
            The name of the item.
       *item_id*
            type: int
            The id of the item.
       *item_position_x*
            type: int
            The new x position of the item.
       *item_position_y*
            type: int
            The new y position of the item.
       *item_position_alignment*
            type: int
            The new alignment of the item.
       *item_rotation*
            type: double
            The new clockwise rotation of the item in degrees.
       *item_scale_x*
            type: double
            The new x scale of the item.
       *item_scale_y*
            type: double
            The new y scale of the item.
       *item_crop_top*
            type: int
            The new amount of pixels cropped off the top of the source before scaling.
       *item_crop_bottom*
            type: int
            The new amount of pixels cropped off the bottom of the source before scaling.
       *item_crop_left*
            type: int
            The new amount of pixels cropped off the left of the source before scaling.
       *item_crop_right*
            type: int
            The new amount of pixels cropped off the right of the source before scaling.
       *item_visible*
            type: bool
            The new visibility of the item. 'true' shows source, 'false' hides source.
       *item_locked*
            type: bool
            The new locked of the item. 'true' is locked, 'false' is unlocked.
       *item_bounds_type*
            type: String
            The new bounds type of the item.
       *item_bounds_alignment*
            type: int
            The new alignment of the bounding box. (0-2, 4-6, 8-10)
       *item_bounds_x*
            type: double
            The new width of the bounding box.
       *item_bounds_y*
            type: double
            The new height of the bounding box.
    """
    def __init__(self, item_name, item_id, item_position_x, item_position_y, item_position_alignment, item_rotation, item_scale_x, item_scale_y, item_crop_top, item_crop_bottom, item_crop_left, item_crop_right, item_visible, item_locked, item_bounds_type, item_bounds_alignment, item_bounds_x, item_bounds_y, scene = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemProperties"
        self.dataout["item.name"] = item_name
        self.dataout["item.id"] = item_id
        self.dataout["item.position.x"] = item_position_x
        self.dataout["item.position.y"] = item_position_y
        self.dataout["item.position.alignment"] = item_position_alignment
        self.dataout["item.rotation"] = item_rotation
        self.dataout["item.scale.x"] = item_scale_x
        self.dataout["item.scale.y"] = item_scale_y
        self.dataout["item.crop.top"] = item_crop_top
        self.dataout["item.crop.bottom"] = item_crop_bottom
        self.dataout["item.crop.left"] = item_crop_left
        self.dataout["item.crop.right"] = item_crop_right
        self.dataout["item.visible"] = item_visible
        self.dataout["item.locked"] = item_locked
        self.dataout["item.bounds.type"] = item_bounds_type
        self.dataout["item.bounds.alignment"] = item_bounds_alignment
        self.dataout["item.bounds.x"] = item_bounds_x
        self.dataout["item.bounds.y"] = item_bounds_y
        self.dataout["scene"] = scene


class ResetSceneItem(base_classes.Baserequests):
    """Reset a scene item.

    :Arguments:
       *scene_name*
            type: String (optional)
            Name of the scene the source belongs to. Defaults to the current scene.
       *item*
            type: String
            Name of the source item.
    """
    def __init__(self, item, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "ResetSceneItem"
        self.dataout["item"] = item
        self.dataout["scene-name"] = scene_name


class SetSceneItemRender(base_classes.Baserequests):
    """Show or hide a specified source item in a specified scene.

    :Arguments:
       *source*
            type: String
            Scene item name in the specified scene.
       *render*
            type: boolean
            true = shown ; false = hidden
       *scene_name*
            type: String (optional)
            Name of the scene where the source resides. Defaults to the currently active scene.
    """
    def __init__(self, source, render, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemRender"
        self.dataout["source"] = source
        self.dataout["render"] = render
        self.dataout["scene-name"] = scene_name


class SetSceneItemPosition(base_classes.Baserequests):
    """Sets the coordinates of a specified source item.

    :Arguments:
       *scene_name*
            type: String (optional)
            The name of the scene that the source item belongs to. Defaults to the current scene.
       *item*
            type: String
            The name of the source item.
       *x*
            type: double
            X coordinate.
       *y*
            type: double
            Y coordinate.
    """
    def __init__(self, item, x, y, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemPosition"
        self.dataout["item"] = item
        self.dataout["x"] = x
        self.dataout["y"] = y
        self.dataout["scene-name"] = scene_name


class SetSceneItemTransform(base_classes.Baserequests):
    """Set the transform of the specified source item.

    :Arguments:
       *scene_name*
            type: String (optional)
            The name of the scene that the source item belongs to. Defaults to the current scene.
       *item*
            type: String
            The name of the source item.
       *x_scale*
            type: double
            Width scale factor.
       *y_scale*
            type: double
            Height scale factor.
       *rotation*
            type: double
            Source item rotation (in degrees).
    """
    def __init__(self, item, x_scale, y_scale, rotation, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemTransform"
        self.dataout["item"] = item
        self.dataout["x-scale"] = x_scale
        self.dataout["y-scale"] = y_scale
        self.dataout["rotation"] = rotation
        self.dataout["scene-name"] = scene_name


class SetSceneItemCrop(base_classes.Baserequests):
    """Sets the crop coordinates of the specified source item.

    :Arguments:
       *scene_name*
            type: String (optional)
            the name of the scene that the source item belongs to. Defaults to the current scene.
       *item*
            type: String
            The name of the source.
       *top*
            type: int
            Pixel position of the top of the source item.
       *bottom*
            type: int
            Pixel position of the bottom of the source item.
       *left*
            type: int
            Pixel position of the left of the source item.
       *right*
            type: int
            Pixel position of the right of the source item.
    """
    def __init__(self, item, top, bottom, left, right, scene_name = None):
        base_classes.Baserequests.__init__(self)
        self.name = "SetSceneItemCrop"
        self.dataout["item"] = item
        self.dataout["top"] = top
        self.dataout["bottom"] = bottom
        self.dataout["left"] = left
        self.dataout["right"] = right
        self.dataout["scene-name"] = scene_name


